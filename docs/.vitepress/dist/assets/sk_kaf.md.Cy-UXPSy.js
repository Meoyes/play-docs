import{_ as e,c as o,a3 as t,o as r}from"./chunks/framework.D1UdA7QR.js";const n="/jkhd.png",s="/bkhd.png",f=JSON.parse('{"title":"客户端与服务端","description":"","frontmatter":{},"headers":[],"relativePath":"sk/kaf.md","filePath":"sk/kaf.md","lastUpdated":null}'),l={name:"sk/kaf.md"};function d(c,a,i,p,h,k){return r(),o("div",null,a[0]||(a[0]=[t('<h1 id="客户端与服务端" tabindex="-1">客户端与服务端 <a class="header-anchor" href="#客户端与服务端" aria-label="Permalink to &quot;客户端与服务端&quot;">​</a></h1><h2 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-label="Permalink to &quot;客户端&quot;">​</a></h2><h3 id="客户端简介" tabindex="-1">客户端简介 <a class="header-anchor" href="#客户端简介" aria-label="Permalink to &quot;客户端简介&quot;">​</a></h3><p>什么是客户端？其实客户端就是你打开的 游戏 （下为<strong>图例</strong>）</p><p><img src="'+n+'" alt="Java" loading="lazy"></p><blockquote><p>Java版客户端主页，图为1.20.1版本</p></blockquote><p><img src="'+s+'" alt="Bedrock" loading="lazy"></p><blockquote><p>基岩版客户端主页，图为1.21.51版本</p></blockquote><h3 id="客户端分-原版客户端-和-模组客户端-两类" tabindex="-1">客户端分 原版客户端 和 模组客户端 两类 <a class="header-anchor" href="#客户端分-原版客户端-和-模组客户端-两类" aria-label="Permalink to &quot;客户端分 原版客户端 和 模组客户端 两类&quot;">​</a></h3><p>客户端分 <code>原版客户端</code> 和 <code>模组客户端</code> 两类</p><p>原版客户端：原版客户端就是没有装载任何 <strong>mod加载器（例如forge、fabric等）</strong> 的客户端，这也意味着你不能获得众多模组的体验。</p><p>模组客户端：模组客户端就是装载了任意 <strong>mod加载器</strong> 的客户端。通常相应的模组端</p>',12)]))}const u=e(l,[["render",d]]);export{f as __pageData,u as default};
